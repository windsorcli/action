name: CI

on:
  push:

env:
  WINDSOR_VERSION: v0.5.6
  WINDSOR_CONTEXT: test

jobs:
  windsorcli:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
  
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false

      - name: Install Windsor CLI
        uses: ./
        with:
          verbose: true
          workdir: test
          version: ${{ env.WINDSOR_VERSION }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Verify Windsor Tool Installation
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');
            const os = require('os');

            const version = process.env.WINDSOR_VERSION;
            const toolCacheDir = process.env.RUNNER_TOOL_CACHE || path.join(os.homedir(), '_tool');
            const installFolder = path.join(toolCacheDir, 'windsor', version);
            const windsorExecutable = os.platform() === 'win32' ? 'windsor.exe' : 'windsor';

            console.log('Verifying tool installation:');
            console.log('- Tool cache dir:', toolCacheDir);
            console.log('- Install folder:', installFolder);

            // Check installation directory exists
            if (!fs.existsSync(installFolder)) {
              console.error(`Error: Tool install folder does not exist: ${installFolder}`);
              process.exit(1);
            }

            // Check binary exists and is executable
            const binaryPath = path.join(installFolder, windsorExecutable);
            if (!fs.existsSync(binaryPath)) {
              console.error(`Error: Windsor binary does not exist: ${binaryPath}`);
              process.exit(1);
            }

            // Check PATH
            const pathEnv = process.env.PATH;
            if (!pathEnv.includes(installFolder)) {
              console.error(`Error: ${installFolder} not found in PATH`);
              process.exit(1);
            }

            // Verify version
            const versionOutput = execSync(`${binaryPath} version`).toString().trim();
            const versionMatch = versionOutput.match(/^Version:\s*(\S+)/);
            const installedVersion = versionMatch ? `v${versionMatch[1]}` : '';
            
            if (installedVersion !== version) {
              console.error(`Error: Version mismatch. Expected: ${version}, Got: ${installedVersion}`);
              process.exit(1);
            }

            console.log('✓ Windsor tool installation verified');

      - name: Verify Windsor Context
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const path = require('path');

            try {
              console.log('Getting Windsor context...');
              const contextOutput = execSync(`windsor context get`, { stdio: 'pipe' }).toString().trim();
              console.log(`Current Windsor context: ${contextOutput}`);
              const expectedContext = process.env.WINDSOR_CONTEXT;
              if (contextOutput !== expectedContext) {
                console.error(`Error: Windsor context is not '${expectedContext}'. Current context: ${contextOutput}`);
                process.exit(1);
              } else {
                console.log(`Windsor context is correctly set to ${expectedContext}.`);
              }
            } catch (error) {
              console.error('Error getting Windsor context:', error);
              process.exit(1);
            }

      - name: Assert base environment variables are injected
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const requiredEnvVars = [
              'KUBECONFIG',
              'KUBE_CONFIG_PATH',
              'OMNICONFIG',
              'TALOSCONFIG',
              'WINDSOR_CONTEXT',
              'WINDSOR_PROJECT_ROOT'
            ];

            const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
            if (missingVars.length > 0) {
              console.error('Missing required environment variables:', missingVars);
              process.exit(1);
            }

            console.log('All required environment variables are present:');
            requiredEnvVars.forEach(varName => {
              console.log(`${varName}=${process.env[varName]}`);
            });

      - name: Change to a terraform folder
        uses: ./
        with:
          verbose: true
          workdir: test/terraform/sample
          version: ${{ env.WINDSOR_VERSION }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Assert TF_ environment variables are injected
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const requiredTfVars = [
              'TF_CLI_ARGS_apply',
              'TF_CLI_ARGS_destroy',
              'TF_CLI_ARGS_import',
              'TF_CLI_ARGS_init',
              'TF_CLI_ARGS_plan',
              'TF_DATA_DIR',
              'TF_VAR_context_path',
              'TF_VAR_os_type'
            ];
            const missingVars = requiredTfVars.filter(varName => !process.env[varName]);
            if (missingVars.length > 0) {
              console.error('Missing required TF_ environment variables:', missingVars);
              process.exit(1);
            }

            const projectRoot = process.env.WINDSOR_PROJECT_ROOT.replace(/\\/g, '/');

            let expectedVars;
            if (process.platform === 'win32') {
              expectedVars = {
                'TF_CLI_ARGS_apply': `"${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan"`,
                'TF_CLI_ARGS_destroy': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_import': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_init': `-backend=true -backend-config="path=${projectRoot}/contexts/test/.tfstate/sample/terraform.tfstate"`,
                'TF_CLI_ARGS_plan': `-out="${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan" -var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_DATA_DIR': `${projectRoot}/contexts/test/.terraform/sample`,
                'TF_VAR_context_path': `${projectRoot}/contexts/test`,
                'TF_VAR_os_type': 'windows'
              };
            } else {
              expectedVars = {
                'TF_CLI_ARGS_apply': `"${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan"`,
                'TF_CLI_ARGS_destroy': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_import': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_init': `-backend=true -backend-config="path=${projectRoot}/contexts/test/.tfstate/sample/terraform.tfstate"`,
                'TF_CLI_ARGS_plan': `-out="${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan" -var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_DATA_DIR': `${projectRoot}/contexts/test/.terraform/sample`,
                'TF_VAR_context_path': `${projectRoot}/contexts/test`,
                'TF_VAR_os_type': 'unix'
              };
            }

            for (const [varName, expectedValue] of Object.entries(expectedVars)) {
              if (process.env[varName] !== expectedValue) {
                console.error(`Error: ${varName} does not match expected value`);
                console.error(`Expected: ${expectedValue}`);
                console.error(`Got: ${process.env[varName]}`);
                process.exit(1);
              }
            }

            console.log('All required TF_ environment variables are present and correct:');
            requiredTfVars.forEach(varName => {
              console.log(`${varName}=${process.env[varName]}`);
            });

      - name: Assert Terraform workflow creates expected output
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');

            try {
              process.chdir('test/terraform/sample');
              execSync('terraform init', { stdio: 'inherit' });
              execSync('terraform plan', { stdio: 'inherit' });
              execSync('terraform apply', { stdio: 'inherit' });

              if (!fs.existsSync('test.txt')) {
                console.error('Error: test.txt was not created');
                process.exit(1);
              }

              const content = fs.readFileSync('test.txt', 'utf8');
              if (content !== 'Hello from Windsor CLI test!') {
                console.error(`Error: test.txt contents do not match expected value. Expected: "Hello from Windsor CLI test!", Got: "${content}"`);
                process.exit(1);
              }

              console.log('✓ Terraform workflow completed successfully');
            } catch (error) {
              console.error('Error running Terraform:', error.message);
              if (error.stdout) console.error('stdout:', error.stdout);
              if (error.stderr) console.error('stderr:', error.stderr);
              process.exit(1);
            }
