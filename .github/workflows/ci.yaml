name: CI

on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 6 * * *'  # Run at 2AM ET / 6AM UTC

jobs:
  test:
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    env:
      WINDSOR_CONTEXT: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        ref: 
          - v0.6.0 # renovate: datasource=github-releases depName=windsorcli/cli
          - main
    runs-on: ${{ matrix.os }}
  
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Go
        if: ${{ !startsWith(matrix.ref, 'v') }}
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: 1.24.3 # renovate: datasource=github-releases depName=golang/go

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: 1.11.4 # renovate: datasource=github-releases depName=hashicorp/terraform
          terraform_wrapper: false

      - name: Install Windsor CLI
        uses: ./
        with:
          workdir: test
          ref: ${{ matrix.ref }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Verify Windsor Context
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const path = require('path');

            try {
              console.log('Getting Windsor context...');
              const contextOutput = execSync(`windsor context get`, { stdio: 'pipe' }).toString().trim();
              console.log(`Current Windsor context: ${contextOutput}`);
              const expectedContext = process.env.WINDSOR_CONTEXT;
              if (contextOutput !== expectedContext) {
                console.error(`Error: Windsor context is not '${expectedContext}'. Current context: ${contextOutput}`);
                process.exit(1);
              } else {
                console.log(`Windsor context is correctly set to ${expectedContext}.`);
              }
            } catch (error) {
              console.error('Error getting Windsor context:', error);
              process.exit(1);
            }

      - name: Assert base environment variables are injected
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const requiredEnvVars = [
              'KUBECONFIG',
              'KUBE_CONFIG_PATH',
              'OMNICONFIG',
              'TALOSCONFIG',
              'WINDSOR_CONTEXT',
              'WINDSOR_PROJECT_ROOT',
            ];

            const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
            if (missingVars.length > 0) {
              console.error('Missing required environment variables:', missingVars);
              process.exit(1);
            }

            console.log('All required environment variables are present:');
            requiredEnvVars.forEach(varName => {
              console.log(`${varName}=${process.env[varName]}`);
            });

      - name: Change to a terraform folder
        uses: ./
        with:
          workdir: test/terraform/sample
          ref: ${{ matrix.ref }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Assert TF_ environment variables are injected
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const requiredTfVars = [
              'TF_CLI_ARGS_apply',
              'TF_CLI_ARGS_destroy',
              'TF_CLI_ARGS_import',
              'TF_CLI_ARGS_init',
              'TF_CLI_ARGS_plan',
              'TF_DATA_DIR',
              'TF_VAR_context_path',
              'TF_VAR_os_type'
            ];
            const missingVars = requiredTfVars.filter(varName => !process.env[varName]);
            if (missingVars.length > 0) {
              console.error('Missing required TF_ environment variables:', missingVars);
              process.exit(1);
            }

            const projectRoot = process.env.WINDSOR_PROJECT_ROOT.replace(/\\/g, '/');

            let expectedVars;
            if (process.platform === 'win32') {
              expectedVars = {
                'TF_CLI_ARGS_apply': `"${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan"`,
                'TF_CLI_ARGS_destroy': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_import': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_init': `-backend=true -backend-config="path=${projectRoot}/contexts/test/.tfstate/sample/terraform.tfstate"`,
                'TF_CLI_ARGS_plan': `-out="${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan" -var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_DATA_DIR': `${projectRoot}/contexts/test/.terraform/sample`,
                'TF_VAR_context_path': `${projectRoot}/contexts/test`,
                'TF_VAR_os_type': 'windows'
              };
            } else {
              expectedVars = {
                'TF_CLI_ARGS_apply': `"${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan"`,
                'TF_CLI_ARGS_destroy': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_import': `-var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_CLI_ARGS_init': `-backend=true -backend-config="path=${projectRoot}/contexts/test/.tfstate/sample/terraform.tfstate"`,
                'TF_CLI_ARGS_plan': `-out="${projectRoot}/contexts/test/.terraform/sample/terraform.tfplan" -var-file="${projectRoot}/contexts/test/terraform/sample.tfvars"`,
                'TF_DATA_DIR': `${projectRoot}/contexts/test/.terraform/sample`,
                'TF_VAR_context_path': `${projectRoot}/contexts/test`,
                'TF_VAR_os_type': 'unix'
              };
            }

            for (const [varName, expectedValue] of Object.entries(expectedVars)) {
              if (process.env[varName] !== expectedValue) {
                console.error(`Error: ${varName} does not match expected value`);
                console.error(`Expected: ${expectedValue}`);
                console.error(`Got: ${process.env[varName]}`);
                process.exit(1);
              }
            }

            console.log('All required TF_ environment variables are present and correct:');
            requiredTfVars.forEach(varName => {
              console.log(`${varName}=${process.env[varName]}`);
            });

      - name: Assert Terraform workflow creates expected output
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');

            try {
              process.chdir('test/terraform/sample');
              execSync('terraform init', { stdio: 'inherit' });
              execSync('terraform plan', { stdio: 'inherit' });
              execSync('terraform apply', { stdio: 'inherit' });

              if (!fs.existsSync('test.txt')) {
                console.error('Error: test.txt was not created');
                process.exit(1);
              }

              const content = fs.readFileSync('test.txt', 'utf8');
              if (content !== 'Hello from Windsor CLI test!') {
                console.error(`Error: test.txt contents do not match expected value. Expected: "Hello from Windsor CLI test!", Got: "${content}"`);
                process.exit(1);
              }

              console.log('âœ“ Terraform workflow completed successfully');
            } catch (error) {
              console.error('Error running Terraform:', error.message);
              if (error.stdout) console.error('stdout:', error.stdout);
              if (error.stderr) console.error('stderr:', error.stderr);
              process.exit(1);
            }

      - name: Test secret masking
        uses: ./
        with:
          context: test
          workdir: test
          inject-secrets: true

      - name: Verify secret masking
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const vars = [
              'TEST_SENSITIVE',
              'TEST_SENSITIVE_ALT',
              'TEST_SENSITIVE_SPACED',
              'TEST_SENSITIVE_NESTED',
              'TEST_SENSITIVE_MULTI',
              'TEST_SENSITIVE_EMPTY',
              'TEST_SENSITIVE_INVALID',
            ];
            console.log('Printing secret environment variables for manual masking verification:');
            for (const v of vars) {
              console.log(`${v}='${process.env[v]}'`);
            }

  test-install-only:
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: 1.24.3 # renovate: datasource=github-releases depName=golang/go

      - name: Install Windsor CLI (install-only)
        uses: ./
        with:
          ref: main
          install-only: true

      - name: Verify CLI is installed but not initialized
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');

            try {
              // Verify CLI is installed and executable
              const versionOutput = execSync('windsor version', { stdio: 'pipe' }).toString().trim();
              console.log('Windsor CLI version:', versionOutput);

              // Verify environment variables are not set
              const requiredEnvVars = [
                'KUBECONFIG',
                'KUBE_CONFIG_PATH',
                'OMNICONFIG',
                'TALOSCONFIG',
                'WINDSOR_CONTEXT',
                'WINDSOR_PROJECT_ROOT'
              ];

              const setVars = requiredEnvVars.filter(varName => process.env[varName]);
              if (setVars.length > 0) {
                console.error('Error: Environment variables should not be set in install-only mode:', setVars);
                process.exit(1);
              }

              // Verify windsor.yaml was not created
              if (fs.existsSync('windsor.yaml')) {
                console.error('Error: windsor.yaml was created in install-only mode');
                process.exit(1);
              }

              console.log('âœ“ No environment variables are set as expected');
              console.log('âœ“ windsor.yaml was not created as expected');
            } catch (error) {
              console.error('Error:', error.message);
              process.exit(1);
            }
