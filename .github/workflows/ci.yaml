name: CI

on:
  push:
  # pull_request:
  #   branches:
  #     - main
  # repository_dispatch:
  #   types: 
  #     - main-branch-update

jobs:
  windsorcli:
    runs-on: ubuntu-latest
    # runs-on: windows-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Install Windsor CLI Action
      - name: Install Windsor CLI
        uses: ./
        with:
          # version: v0.5.3
          ref: main
          install_folder: ${{ github.workspace }}/bin
          context: local

      - name: Initialize Windsor Context
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const path = require('path');

            const installFolder = '${{ github.workspace }}/bin';
            const windsorPath = path.join(installFolder, 'windsor');

            try {
              console.log('Initializing Windsor context...');
              execSync(`${windsorPath} init local`, { stdio: 'inherit' });
              console.log('Windsor context initialized successfully.');
            } catch (error) {
              console.error('Error initializing Windsor context:', error);
              process.exit(1);
            }
      - name: Verify Windsor Context
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const path = require('path');

            const installFolder = '${{ github.workspace }}/bin';
            const windsorPath = path.join(installFolder, 'windsor');

            try {
              console.log('Getting Windsor context...');
              const contextOutput = execSync(`${windsorPath} context get`, { stdio: 'pipe' }).toString().trim();
              console.log(`Current Windsor context: ${contextOutput}`);
              if (contextOutput !== 'local') {
                console.error(`Error: Windsor context is not 'local'. Current context: ${contextOutput}`);
                process.exit(1);
              } else {
                console.log('Windsor context is correctly set to local.');
              }
            } catch (error) {
              console.error('Error getting Windsor context:', error);
              process.exit(1);
            }

      - name: Windsor Context Get
        run: |
          ${{ github.workspace }}/bin/windsor context get
        shell: bash

      - name: Check environment variables using GitHub Script
        uses: actions/github-script@v7
        with:
          script: |
            const envVars = [
              'KUBECONFIG',
              'KUBE_CONFIG_PATH',
              'DOCKER_CONFIG',
              'DOCKER_HOST',
              'OMNICONFIG',
              'TALOSCONFIG',
              'WINDSOR_CONTEXT',
              'WINDSOR_PROJECT_ROOT'
            ];

            envVars.forEach(varName => {
              console.log(`${varName}="${process.env[varName] || ''}"`);
            });

      - name: Create terraform test folder using GitHub Script
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const terraformDir = path.join(process.env.GITHUB_WORKSPACE, 'terraform', 'cluster');
            const mainTfPath = path.join(terraformDir, 'main.tf');

            // Create the directory if it doesn't exist
            if (!fs.existsSync(terraformDir)) {
              fs.mkdirSync(terraformDir, { recursive: true });
              console.log(`Created directory: ${terraformDir}`);
            } else {
              console.log(`Directory already exists: ${terraformDir}`);
            }

            // Create the main.tf file if it doesn't exist
            if (!fs.existsSync(mainTfPath)) {
              fs.writeFileSync(mainTfPath, '');
              console.log(`Created file: ${mainTfPath}`);
            } else {
              console.log(`File already exists: ${mainTfPath}`);
            }

      - name: Check TF_ environment variables using GitHub Script
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Execute the windsor env command and capture its output
            try {
              const windsorEnvOutput = execSync('windsor env', { encoding: 'utf-8' });
              console.log("windsor env output:");
              console.log(windsorEnvOutput);
            } catch (error) {
              console.error("Error executing windsor env:", error.message);
            }

            // Log all environment variables that start with TF_
            console.log("TF_ environment variables:");
            Object.keys(process.env).forEach(key => {
              if (key.startsWith('TF_')) {
                console.log(`${key}=${process.env[key]}`);
              }
            });

      # Install Windsor CLI Action
      - name: CD to terraform test folder
        uses: ./
        with:
          workdir: ${{ github.workspace }}
          # version: v0.5.2
          ref: main
          install_folder: ${{ github.workspace }}/bin
          context: local

      - name: Check TF_ environment variables using GitHub Script
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Execute the windsor env command and capture its output
            try {
              const windsorEnvOutput = execSync('windsor env', { encoding: 'utf-8' });
              console.log("windsor env output:");
              console.log(windsorEnvOutput);
            } catch (error) {
              console.error("Error executing windsor env:", error.message);
            }

            // Log all environment variables that start with TF_
            console.log("TF_ environment variables:");
            Object.keys(process.env).forEach(key => {
              if (key.startsWith('TF_')) {
                console.log(`${key}=${process.env[key]}`);
              }
            });
            
      # Staging Testing
      # CD Windsor CLI - staging context
      - name: CD to terraform test folder
        uses: ./
        with:
          workdir: ${{ github.workspace }}/terraform/cluster
          # version: v0.5.2
          ref: main
          install_folder: ${{ github.workspace }}/bin
          context: staging

      - name: Check TF_ environment variables using GitHub Script
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Execute the windsor env command and capture its output
            try {
              const windsorEnvOutput = execSync('windsor env', { encoding: 'utf-8' });
              console.log("windsor env output:");
              console.log(windsorEnvOutput);
            } catch (error) {
              console.error("Error executing windsor env:", error.message);
            }

            // Log all environment variables that start with TF_
            console.log("TF_ environment variables:");
            Object.keys(process.env).forEach(key => {
              if (key.startsWith('TF_')) {
                console.log(`${key}=${process.env[key]}`);
              }
            });
  
      # Install Windsor CLI Action
      - name: CD to terraform test folder
        uses: ./
        with:
          workdir: ${{ github.workspace }}
          # version: v0.5.2
          ref: main
          install_folder: ${{ github.workspace }}/bin
          context: staging

      - name: Check TF_ environment variables using GitHub Script
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Execute the windsor env command and capture its output
            try {
              const windsorEnvOutput = execSync('windsor env', { encoding: 'utf-8' });
              console.log("windsor env output:");
              console.log(windsorEnvOutput);
            } catch (error) {
              console.error("Error executing windsor env:", error.message);
            }

            // Log all environment variables that start with TF_
            console.log("TF_ environment variables:");
            Object.keys(process.env).forEach(key => {
              if (key.startsWith('TF_')) {
                console.log(`${key}=${process.env[key]}`);
              }
            });
