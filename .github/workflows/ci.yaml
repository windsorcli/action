name: CI

on:
  push:

env:

  WINDSOR_VERSION: v0.5.6
  WINDSOR_CONTEXT: local

jobs:
  windsorcli:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
  
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: v1.11.4

      - name: Install Windsor CLI
        uses: ./
        with:
          version: ${{ env.WINDSOR_VERSION }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Verify Windsor Context
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const path = require('path');

            try {
              console.log('Getting Windsor context...');
              const contextOutput = execSync(`windsor context get`, { stdio: 'pipe' }).toString().trim();
              console.log(`Current Windsor context: ${contextOutput}`);
              const expectedContext = process.env.WINDSOR_CONTEXT;
              if (contextOutput !== expectedContext) {
                console.error(`Error: Windsor context is not '${expectedContext}'. Current context: ${contextOutput}`);
                process.exit(1);
              } else {
                console.log(`Windsor context is correctly set to ${expectedContext}.`);
              }
            } catch (error) {
              console.error('Error getting Windsor context:', error);
              process.exit(1);
            }

      - name: Assert base environment variables are injected
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const requiredEnvVars = [
              'KUBECONFIG',
              'KUBE_CONFIG_PATH',
              'OMNICONFIG',
              'TALOSCONFIG',
              'WINDSOR_CONTEXT',
              'WINDSOR_PROJECT_ROOT'
            ];

            const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
            if (missingVars.length > 0) {
              console.error('Missing required environment variables:', missingVars);
              process.exit(1);
            }

            console.log('All required environment variables are present:');
            requiredEnvVars.forEach(varName => {
              console.log(`${varName}=${process.env[varName]}`);
            });

      - name: Change to a terraform folder
        uses: ./
        with:
          workdir: .windsor/.tf_modules/cluster/talos
          version: ${{ env.WINDSOR_VERSION }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Assert TF_ environment variables are injected (terraform/cluster context)
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const requiredTfVars = [
              'TF_CLI_ARGS_apply',
              'TF_CLI_ARGS_destroy',
              'TF_CLI_ARGS_import',
              'TF_CLI_ARGS_init',
              'TF_CLI_ARGS_plan',
              'TF_DATA_DIR',
              'TF_VAR_context_path',
              'TF_VAR_os_type'
            ];

            const missingVars = requiredTfVars.filter(varName => !process.env[varName]);
            if (missingVars.length > 0) {
              console.error('Missing required TF_ environment variables:', missingVars);
              process.exit(1);
            }

            console.log('All required TF_ environment variables are present:');
            requiredTfVars.forEach(varName => {
              console.log(`${varName}=${process.env[varName]}`);
            });

            // Run terraform init in the current directory
            const { execSync } = require('child_process');
            try {
              console.log('Running terraform init in directory:', process.cwd());
              const output = execSync('terraform init', { stdio: 'inherit' });
              console.log('terraform init completed successfully');
            } catch (error) {
              console.error('Error running terraform init:', error.message);
              if (error.stdout) console.error('stdout:', error.stdout);
              if (error.stderr) console.error('stderr:', error.stderr);
              process.exit(1);
            }
