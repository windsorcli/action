name: CI

on:
  push:

env:

  WINDSOR_VERSION: v0.5.6
  WINDSOR_CONTEXT: local

jobs:
  windsorcli:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
  
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Windsor CLI
        uses: ./
        with:
          version: ${{ env.WINDSOR_VERSION }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Verify Windsor Context
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const path = require('path');

            try {
              console.log('Getting Windsor context...');
              const contextOutput = execSync(`windsor context get`, { stdio: 'pipe' }).toString().trim();
              console.log(`Current Windsor context: ${contextOutput}`);
              const expectedContext = process.env.WINDSOR_CONTEXT;
              if (contextOutput !== expectedContext) {
                console.error(`Error: Windsor context is not '${expectedContext}'. Current context: ${contextOutput}`);
                process.exit(1);
              } else {
                console.log(`Windsor context is correctly set to ${expectedContext}.`);
              }
            } catch (error) {
              console.error('Error getting Windsor context:', error);
              process.exit(1);
            }

      - name: Check environment variables
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const envVars = [
              'KUBECONFIG',
              'KUBE_CONFIG_PATH',
              'OMNICONFIG',
              'TALOSCONFIG',
              'WINDSOR_CONTEXT',
              'WINDSOR_PROJECT_ROOT'
            ];

            envVars.forEach(varName => {
              console.log(`${varName}="${process.env[varName] || ''}"`);
            });

      - name: Change to a terraform folder
        uses: ./
        with:
          workdir: ${{ github.workspace }}/.windsor/.tf_modules/cluster/talos
          version: ${{ env.WINDSOR_VERSION }}
          context: ${{ env.WINDSOR_CONTEXT }}

      - name: Check TF_ environment variables and folder contents
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');
            
            // Change to the working directory
            const workDir = '${{ github.workspace }}/.windsor/.tf_modules/cluster/talos';
            process.chdir(workDir);
            
            // Log all environment variables that start with TF_
            console.log("TF_ environment variables:");
            Object.keys(process.env).forEach(key => {
              if (key.startsWith('TF_')) {
                console.log(`${key}=${process.env[key]}`);
              }
            });
            
            // Log other relevant environment variables
            console.log("Windsor-related environment variables:");
            ['WINDSOR_CONTEXT', 'WINDSOR_PROJECT_ROOT'].forEach(key => {
              console.log(`${key}=${process.env[key] || ''}`);
            });
            
            // Print current directory and list files
            console.log("Current directory:", process.cwd());
            console.log("Directory contents:");
            const files = fs.readdirSync('.');
            files.forEach(file => {
              const stats = fs.statSync(file);
              console.log(`- ${file} (${stats.isDirectory() ? 'directory' : 'file'})`);
            });

      # - name: Assert TF_ environment variables are injected (terraform/cluster context)
      #   uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      #   with:
      #     script: |
      #       const tfVars = Object.keys(process.env).filter(k => k.startsWith('TF_'));
      #       if (tfVars.length === 0) {
      #         console.error('[terraform/cluster context] No TF_ environment variables injected by Windsor action.');
      #         process.exit(1);
      #       } else {
      #         console.log('[terraform/cluster context] TF_ environment variables injected:', tfVars);
      #       }
