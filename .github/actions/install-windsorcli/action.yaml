# install-windsorcli.yaml
name: 'Install Windsor CLI'

inputs:
  windsorcli_version:
    required: false
    type: string
    default: v0.4.1
  windsorcli_branch:
    required: false
    type: string
    default: main
  windsorcli_install_folder:
    required: false
    type: string
    default: ${{ github.workspace }}/bin
  use_release:
    required: true
    type: boolean
    default: true
  os:
    required: false
    type: string
    default: Linux
  arch:
    required: false
    type: string  
    default: X64

runs:
  using: 'composite'
  steps:
    # Install Windsor CLI on Linux/macOS
    - name: Install the Windsor CLI on Linux/macOS
      if: inputs.os == 'Linux' || inputs.os == 'macOS'
      run: |
        
        # Convert HOST_ARCH to TMP_ARCH
        case "${{ inputs.arch }}" in
          "ARM64")
            TMP_HOST_ARCH="arm64"
            ;;
          "X64")
            TMP_HOST_ARCH="amd64"
            ;;
          *)
            echo "Unsupported HOST_ARCH: ${{ inputs.arch }}"
            exit 1
            ;;
        esac

        # Convert HOST_OS to TMP_OS
        case "${{ inputs.os }}" in
          "Windows")
            TMP_HOST_OS="windows"
            ;;
          "Linux")
            TMP_HOST_OS="linux"
            ;;
          "macOS")
            TMP_HOST_OS="darwin"
            ;;
          *)
            echo "Unsupported HOST_OS: ${{ inputs.os }}"
            exit 1
            ;;
        esac

        numeric_version=$(echo "${{ inputs.windsorcli_version }}" | sed 's/^v//')
        LOCAL_FILE_NAME="windsor_${numeric_version}_${TMP_HOST_OS}_${TMP_HOST_ARCH}.tar.gz"
        DOWNLOAD_FILE_NAME="https://github.com/windsorcli/cli/releases/download/${{ inputs.windsorcli_version }}/${LOCAL_FILE_NAME}"

        if [ "${{ inputs.use_release }}" == "true" ]; then
          
          # Install the release version on Linux/macOS
          
          echo "Installing Windsor CLI using release (${{ inputs.windsorcli_version }})..."
          curl -L -o "$LOCAL_FILE_NAME" "$DOWNLOAD_FILE_NAME"

          mkdir -p "${{ inputs.windsorcli_install_folder }}"

          echo "tar -xzf $LOCAL_FILE_NAME -C ${{inputs.windsorcli_install_folder}}"
          tar -xzf "$LOCAL_FILE_NAME" -C "${{ inputs.windsorcli_install_folder }}"
          chmod +x "${{ inputs.windsorcli_install_folder }}/windsor"
          rm -rf "$LOCAL_FILE_NAME"
          expected_version="${{ inputs.windsorcli_version }}"

        else
          
          # Install the branch version on Linux/macOS
          
          expected_version="dev"
  
          echo "Installing Windsor CLI from branch (${{ inputs.windsorcli_branch }})..."
          if [ -z "${{ inputs.windsorcli_branch }}" ]; then
            echo "inputs.windsorcli_branch is not set."
            exit 1
          fi
          if ! git clone --branch "${{ inputs.windsorcli_branch }}" https://github.com/windsorcli/cli.git; then
            echo "Failed to clone the repository. Please check the branch name and network connection."
            exit 1
          fi

          if ! cd cli/cmd/windsor; then
            echo "Failed to navigate to the Windsor CLI directory."
            exit 1
          fi

          if ! go build -o "${{ inputs.windsorcli_install_folder }}/windsor"; then
            echo "Failed to build the Windsor CLI. Please ensure Go is installed and properly configured."
            exit 1
          fi
        fi

        echo "Installation complete."

        
        # Verify the installation on Linux/macOS
        
        installed_version=$("${{ inputs.windsorcli_install_folder }}/windsor" version | grep "Version:" | awk '{print $2}')
        installed_version="v${installed_version}"

        if [ "${{ inputs.use_release }}" == "true" ]; then
          if [ "$installed_version" == "${{ inputs.windsorcli_version }}" ]; then
            echo "Using release version: ${{ inputs.windsorcli_version }}"
            echo "Installed version: $installed_version"
          else
            echo "Version mismatch: expected ${{ inputs.windsorcli_version }}, got $installed_version"
            exit 1
          fi
        else
          echo "Using branch version: ${{ inputs.windsorcli_branch }}"
          if [ "$installed_version" == "vdev" ]; then
            echo "Installed version: $installed_version"  
          else
            echo "Version mismatch: expected dev, got $installed_version"
            exit 1
          fi
        fi


        # Add windsor env to GITHUB_ENV

        # Add the Windsor CLI install folder to the GitHub path
        echo "${{ inputs.windsorcli_install_folder }}" >> $GITHUB_PATH
        echo "WINDSOR_PROJECT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV

        export WINDSOR_PROJECT_ROOT=${{ github.workspace }}
        
        "${{ inputs.windsorcli_install_folder }}/windsor" init local

        # Run the Windsor env command and capture the output
        windsor_env_output=$("${{ inputs.windsorcli_install_folder }}/windsor" env)

        # Check if the command was successful
        if [ $? -ne 0 ]; then
          echo "Failed to run the Windsor env command."
          exit 1
        fi

        # Parse the output and add it to $GITHUB_ENV
        while IFS= read -r line; do
          # Remove 'export ' from the beginning of each line
          echo "${line#export }" >> $GITHUB_ENV
        done <<< "$windsor_env_output"

      shell: bash

    # Install Windsor CLI on Windows
    - name: Install the Windsor CLI on Windows
      if: inputs.os == 'Windows'
      run: |
        # Convert $HOST_OS
        switch ("${{ inputs.os }}") {
          "Windows" {
            $TMP_HOST_OS = "windows"
          }
        }

        # Convert $HOST_ARCH
        switch ("${{ inputs.arch }}") {
          "ARM64" {
            $TMP_HOST_ARCH = "arm64"
          }
          "X64" {
            $TMP_HOST_ARCH = "amd64"
          }
          default {
            Write-Output "Unsupported HOST_ARCH: ${{ inputs.arch }}"
            exit 1
          }
        }

        # Create bin directory
        Write-Output "Creating directory on Windows: ${{ inputs.windsorcli_install_folder }}"
        try {
            New-Item -Path ${{ inputs.windsorcli_install_folder }} -ItemType Directory -Force -ErrorAction Stop
        } catch {
            Write-Output "Failed to create directory: ${{ inputs.windsorcli_install_folder }}"
            exit 1
        }

        # Install Windsor CLI
        if ("${{ inputs.use_release }}" -eq "true") {
          
          # Install the release version on Windows
          
            Write-Output "Installing Windsor CLI on Windows from release (${{ inputs.windsorcli_version }})..."
            # Assign the version string to a variable
            $versionString = "${{ inputs.windsorcli_version }}"
            $expected_version="${{  inputs.windsorcli_version }}"
            # Trim the 'v' from the start of the version string
            $numeric_version = $versionString.TrimStart('v')
            $url = "https://github.com/windsorcli/cli/releases/download/${{ inputs.windsorcli_version }}/windsor_${numeric_version}_${TMP_HOST_OS}_${TMP_HOST_ARCH}.tar.gz"
            $outputFile = "windsor_${numeric_version}_${TMP_HOST_OS}_${TMP_HOST_ARCH}.tar.gz"
            
            echo "Downloading Windsor CLI from $url"
            echo "Output file: $outputFile"

            # Download the release
            try {
                Invoke-WebRequest -Uri $url -Headers @{"Accept"="application/octet-stream"} -OutFile $outputFile -ErrorAction Stop
            } catch {
                Write-Output "Failed to download Windsor CLI from $url"
                exit 1
            }
            
            # Extract the tar.gz file
            try {
                tar -xzf $outputFile -C ${{ inputs.windsorcli_install_folder }}
            } catch {
                Write-Output "Failed to extract $outputFile"
                exit 1
            }
            
            # Verify installation
            $windsorExePath = Join-Path -Path ${{ inputs.windsorcli_install_folder }} -ChildPath "windsor.exe"
            if (Test-Path -Path $windsorExePath) {
                Write-Output "Windsor CLI installed at $windsorExePath"
            } else {
                Write-Output "Failed to install Windsor CLI at $windsorExePath"
                exit 1
            }
        } else {
          
          # Install the branch version on Windows
          
            Write-Output "Installing Windsor CLI on Windows from branch (${{ inputs.windsorcli_branch }})..."
            try {
                git clone --branch ${{ inputs.windsorcli_branch }} https://github.com/windsorcli/cli.git
            } catch {
                Write-Output "Failed to clone the repository from branch ${{ inputs.windsorcli_branch }}"
                exit 1
            }
            
            try {
                Set-Location -Path "cli" -ErrorAction Stop
            } catch {
                Write-Output "Failed to navigate to the Windsor CLI directory"
                exit 1
            }
            
            try {
                # Ensure the correct path to the main.go file
                go build -o "${{ inputs.windsorcli_install_folder }}\windsor.exe" ./cmd/windsor/main.go
            } catch {
                Write-Output "Failed to build the Windsor CLI"
                exit 1
            }
        }

        Write-Output "Installation complete."

        
        # Verify the installation on Windows
        
        $installedVersionOutput = & "${{ inputs.windsorcli_install_folder }}\windsor.exe" version
        # Extract only the version number from the output
        $installedVersion = $installedVersionOutput -replace 'Version: ([^\s]+).*', '$1'
        $installedVersion = $installedVersion.Trim()
        $installedVersion = "v" + $installedVersion 

        echo "Installed version: $installedVersion"
        echo "Expected version: $expected_version"

        if ("${{ inputs.use_release }}" -eq "true") {
          # Compare only the version number
          
          if ($installedVersion -like "$expected_version*") {
            Write-Output "Version match: $installedVersion starts with $expected_version"
            exit 0
          } else {
            Write-Error "Version mismatch: $installedVersion does not equal $expected_version"
            exit 1
          }
        } else {
          if ($installedVersion -like "*dev*") {
            Write-Output "Version match: got dev as expected"
            exit 0
          } else {
            Write-Error "Version mismatch: expected dev, got $installedVersion"
            exit 1
          }
        }

        # Add windsor env to GITHUB_ENV

        # Add the Windsor CLI install folder to the GitHub path
        Add-Content -Path $env:GITHUB_PATH -Value "${{ inputs.windsorcli_install_folder }}"
        Add-Content -Path $env:GITHUB_ENV -Value "WINDSOR_PROJECT_ROOT=${{ github.workspace }}"

        $env:WINDSOR_PROJECT_ROOT = "${{ github.workspace }}"
        
        & "${{ inputs.windsorcli_install_folder }}\windsor.exe" init local

        # Run the Windsor env command and capture the output
        $windsorEnvOutput = & "${{ inputs.windsorcli_install_folder }}\windsor.exe" env

        # Check if the command was successful
        if ($LASTEXITCODE -ne 0) {
          Write-Output "Failed to run the Windsor env command."
          exit 1
        }

        # Parse the output and add it to $GITHUB_ENV
        $windsorEnvOutput -split "`n" | ForEach-Object {
          # Remove 'export ' from the beginning of each line
          $_ -replace '^export ', '' | Add-Content -Path $env:GITHUB_ENV
        }

      shell: powershell

    # echo $GITHUB_ENV
    - name: Print GITHUB_ENV
      run: |
        echo $GITHUB_ENV
      shell: bash

    # Set the WINDSOR_PROJECT_ROOT environment variable
    # - name: Set WINDSOR_PROJECT_ROOT
    #   run: |
    #     # echo "${{ inputs.windsorcli_install_folder }}" >> $GITHUB_PATH
    #     echo "WINDSOR_PROJECT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV
    #   shell: bash

  # clean:
  #   runs:
  #   using: 'composite'
  #   steps:
  #     # Windsor Clean
  #     - name: Windsor Clean on Linux/macOS
  #       # if: always() && (runner.os == 'Linux' || runner.os == 'macOS') 
  #       if: always()
  #       run: |
  #         ls -al
  #         echo "CLEANING UP"
  #       shell: bash
