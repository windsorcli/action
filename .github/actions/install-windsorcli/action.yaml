# install-windsorcli.yaml
name: 'Install Windsor CLI'

inputs:
  windsorcli_version:
    required: false
    type: string
    default: v0.4.0
  windsorcli_branch:
    required: false
    type: string
    default: main
  windsorcli_install_folder:
    required: false
    type: string
    default: ${{ github.workspace }}/bin
  use_release:
    required: false
    type: boolean
    default: true
  os:
    required: false
    type: string
    default: Linux
  arch:
    required: false
    type: string  

runs:
  using: 'composite'
  steps:
    # Install Windsor CLI on Linux/macOS
    - name: Install the Windsor CLI on Linux/macOS
      if: inputs.os == 'Linux' || inputs.os == 'macOS'
      run: |
        
        # Convert HOST_ARCH to TMP_ARCH
        case "${{ inputs.arch }}" in
          "ARM64")
            TMP_HOST_ARCH="arm64"
            ;;
          "X64")
            TMP_HOST_ARCH="amd64"
            ;;
          *)
            echo "Unsupported HOST_ARCH: ${{ inputs.arch }}"
            exit 1
            ;;
        esac

        # Convert HOST_OS to TMP_OS
        case "${{ inputs.os }}" in
          "Windows")
            TMP_HOST_OS="windows"
            ;;
          "Linux")
            TMP_HOST_OS="linux"
            ;;
          "macOS")
            TMP_HOST_OS="darwin"
            ;;
          *)
            echo "Unsupported HOST_OS: ${{ inputs.os }}"
            exit 1
            ;;
        esac

        numeric_version=$(echo "${{ inputs.windsorcli_version }}" | sed 's/^v//')
        LOCAL_FILE_NAME="windsor_${numeric_version}_${TMP_HOST_OS}_${TMP_HOST_ARCH}.tar.gz"
        DOWNLOAD_FILE_NAME="https://github.com/windsorcli/cli/releases/download/${{ inputs.windsorcli_version }}/${LOCAL_FILE_NAME}"

        if [ "${{ inputs.use_release }}" == "true" ]; then
          echo "Installing Windsor CLI using release (${{ inputs.windsorcli_version }})..."
          curl -L -o "$LOCAL_FILE_NAME" "$DOWNLOAD_FILE_NAME"

          mkdir -p "${{ inputs.windsorcli_install_folder }}"

          echo "tar -xzf $LOCAL_FILE_NAME -C ${{inputs.windsorcli_install_folder}}"
          tar -xzf "$LOCAL_FILE_NAME" -C "${{ inputs.windsorcli_install_folder }}"
          chmod +x "${{ inputs.windsorcli_install_folder }}/windsor"
          rm -rf "$LOCAL_FILE_NAME"
        else

          echo "Installing Windsor CLI from branch (${{ inputs.windsorcli_branch }})..."
          if [ -z "${{ inputs.windsorcli_branch }}" ]; then
            echo "inputs.windsorcli_branch is not set."
            exit 1
          fi
          if ! git clone --branch "${{ inputs.windsorcli_branch }}" https://github.com/windsorcli/cli.git; then
            echo "Failed to clone the repository. Please check the branch name and network connection."
            exit 1
          fi

          if ! cd cli/cmd/windsor; then
            echo "Failed to navigate to the Windsor CLI directory."
            exit 1
          fi

          if ! go build -o "${{ inputs.windsorcli_install_folder }}/windsor"; then
            echo "Failed to build the Windsor CLI. Please ensure Go is installed and properly configured."
            exit 1
          fi
        fi

      shell: bash

    # Install Windsor CLI on Windows
    - name: Install the Windsor CLI on Windows
      if: inputs.os == 'Windows'
      run: |
        # Convert $HOST_OS
        switch ("${{ inputs.os }}") {
          "Windows" {
            $TMP_HOST_OS = "windows"
          }
        }

        # Convert $HOST_ARCH
        switch ("${{ inputs.arch }}") {
          "ARM64" {
            $TMP_HOST_ARCH = "arm64"
          }
          "X64" {
            $TMP_HOST_ARCH = "amd64"
          }
          default {
            Write-Output "Unsupported HOST_ARCH: ${{ inputs.arch }}"
            exit 1
          }
        }

        # Create bin directory
        Write-Output "Creating directory on Windows: ${{ inputs.windsorcli_install_folder }}"
        try {
            New-Item -Path ${{ inputs.windsorcli_install_folder }} -ItemType Directory -Force -ErrorAction Stop
        } catch {
            Write-Output "Failed to create directory: ${{ inputs.windsorcli_install_folder }}"
            exit 1
        }

        # Install Windsor CLI
        if ("${{ inputs.use_release }}" -eq "true") {
            Write-Output "Installing Windsor CLI on Windows from release (${{ inputs.windsorcli_version }})..."
            # Assign the version string to a variable
            $versionString = "${{ inputs.windsorcli_version }}"
            # Trim the 'v' from the start of the version string
            $numeric_version = $versionString.TrimStart('v')
            $url = "https://github.com/windsorcli/cli/releases/download/${{ inputs.windsorcli_version }}/windsor_${numeric_version}_${TMP_HOST_OS}_${TMP_HOST_ARCH}.tar.gz"
            $outputFile = "windsor_${numeric_version}_${TMP_HOST_OS}_${TMP_HOST_ARCH}.tar.gz"
            
            echo "Downloading Windsor CLI from $url"
            echo "Output file: $outputFile"

            # Download the release
            try {
                Invoke-WebRequest -Uri $url -Headers @{"Accept"="application/octet-stream"} -OutFile $outputFile -ErrorAction Stop
            } catch {
                Write-Output "Failed to download Windsor CLI from $url"
                exit 1
            }
            
            # Extract the tar.gz file
            try {
                tar -xzf $outputFile -C ${{ inputs.windsorcli_install_folder }}
            } catch {
                Write-Output "Failed to extract $outputFile"
                exit 1
            }
            
            # Verify installation
            $windsorExePath = Join-Path -Path ${{ inputs.windsorcli_install_folder }} -ChildPath "windsor.exe"
            if (Test-Path -Path $windsorExePath) {
                Write-Output "Windsor CLI installed at $windsorExePath"
            } else {
                Write-Output "Failed to install Windsor CLI at $windsorExePath"
                exit 1
            }
        } else {
            Write-Output "Installing Windsor CLI on Windows from branch (${{ inputs.windsorcli_branch }})..."
            try {
                git clone --branch ${{ inputs.windsorcli_branch }} https://github.com/windsorcli/cli.git
            } catch {
                Write-Output "Failed to clone the repository from branch ${{ inputs.windsorcli_branch }}"
                exit 1
            }
            
            try {
                Set-Location -Path "cli" -ErrorAction Stop
            } catch {
                Write-Output "Failed to navigate to the Windsor CLI directory"
                exit 1
            }
            
            try {
                # Ensure the correct path to the main.go file
                go build -o "${{ inputs.windsorcli_install_folder }}\windsor.exe" ./cmd/windsor/main.go
            } catch {
                Write-Output "Failed to build the Windsor CLI"
                exit 1
            }
        }

        Write-Output "Installation complete."

      shell: powershell

    - name: Add Windsor CLI Install Folder to the GitHub path
      if: inputs.os == 'Linux' || inputs.os == 'macOS'
      run: |
        echo "${{ inputs.windsorcli_install_folder }}" >> $GITHUB_PATH
      shell: bash

    # Verify Windsor CLI version on Linux/macOS
    - name: Check Windsor CLI version on Linux/macOS
      if: inputs.os == 'Linux' || inputs.os == 'macOS'
      run: |
        set -e
        installed_version=$("${{ inputs.windsorcli_install_folder }}/windsor" version | grep "Version:" | awk '{print $2}')
        installed_version=${installed_version//v/}

        if ("${{ inputs.use_release }}" -eq "true") {
          if [ "$installed_version" == "${{ inputs.windsorcli_version }}" ]; then
            echo "Version match: got $installed_version as expected"
            exit 0
          else
            echo "Version mismatch: expected ${{ inputs.windsorcli_version }}, got $installed_version"
            exit 1
          fi
        } else {
          if [ "$installed_version" == "dev" ]; then
            echo "Version match: got $installed_version as expected"
            exit 0
          else
            echo "Version mismatch: expected dev, got $installed_version"
            exit 1
          fi
        }
      shell: bash

    # Verify Windsor CLI version on Windows
    - name: Check Windsor CLI version on Windows
      if: inputs.os == 'Windows'
      run: |
        # Retrieve the installed version of Windsor CLI
        $installedVersionOutput = & "${{ inputs.windsorcli_install_folder }}\\windsor.exe" version
        # Extract the version number from the output
        $installedVersion = $installedVersionOutput -replace 'Version: ([^\s]+).*', '$1'
        # Trim any whitespace from the extracted version
        $installedVersion = $installedVersion -replace 'Version: ([^\s]+).*', '$1'
        $installedVersion = $installedVersion.Trim()
        $installedVersion = "v" + $installedVersion

        if ("${{ inputs.use_release }}" -eq "true") {
          if ("$installedVersion" -eq "${{ inputs.windsorcli_version }}") {
            Write-Output "Version match: got $installedVersion as expected"
            exit 0
          } else {
            Write-Output "Version mismatch: expected .${{ inputs.windsorcli_version }}., got .$installedVersion."
            Write-Error "Version mismatch: expected ${{ inputs.windsorcli_version }}, got $installedVersion"
            exit 1
          }
        } else {
          if ("$installedVersion" -eq "vdev") {
            Write-Output "Version match: got dev as expected"
            exit 0
          } else {
            Write-Error "Version mismatch: expected dev, got $installedVersion"
            exit 1
          }
        }

      shell: powershell
