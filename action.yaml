# windsorcli.yaml
name: 'Windsor CLI Action'
description: 'Installs and configures the Windsor CLI for use in GitHub Actions'

inputs:
  ref:
    description: 'Git reference to build Windsor CLI from source or version tag to download'
    required: false
    default: v0.5.7  # renovate: datasource=github-releases depName=windsorcli/cli
  context:
    description: 'The context to use for Windsor CLI commands'
    required: false
    default: "local"
  workdir:
    description: 'The working directory for Windsor CLI commands'
    required: false
    default: ""
  verbose:
    description: 'Enable verbose logging'
    required: false
    default: "false"

runs:
  using: 'composite'
  steps:

    - name: Check if Git is installed
      id: check-git
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const verbose = '${{ inputs.verbose }}' === 'true';
          try {
            const output = execSync('git --version', { encoding: 'utf-8' });
            if (verbose) console.log('Git version:', output.trim());
          } catch (error) {
            console.error('Git is not installed. Please install Git to proceed.');
            process.exit(1);
          }

    - name: Install Windsor CLI
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');
          
          const cleanInput = (input) => typeof input === 'string' ? input.replace(/\r?\n|\r/g, '') : input;
          const verbose = '${{ inputs.verbose }}' === 'true';
          const ref = cleanInput('${{ inputs.ref }}');
          const isVersionTag = /^v?\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/i.test(ref);

          const isWindows = os.platform() === 'win32';
          const installFolder = isVersionTag 
            ? path.join(process.env.RUNNER_TOOL_CACHE, 'windsor', ref)
            : path.join(process.env.GITHUB_WORKSPACE, 'bin');
          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';
          const githubWorkspace = process.env.GITHUB_WORKSPACE;
          const input_context = cleanInput('${{ inputs.context }}');
          let rawWorkdir = cleanInput('${{ inputs.workdir }}');
          
          if (verbose) {
            console.log('Installation parameters:');
            console.log('- Ref:', ref);
            console.log('- Context:', input_context);
            console.log('- Workdir:', rawWorkdir);
            console.log('- Install folder:', installFolder);
          }
          
          let workdir;
          if (rawWorkdir) {
            const workspacePath = process.env.GITHUB_WORKSPACE || githubWorkspace;
            // Simple path normalization - no quotes, just slashes
            const platformPath = rawWorkdir.replace(/\//g, path.sep);
            
            if (verbose) {
              console.log('Workdir resolution:');
              console.log('- Raw workdir:', rawWorkdir);
              console.log('- Workspace path:', workspacePath);
              console.log('- Platform path:', platformPath);
              console.log('- Platform:', process.platform);
              console.log('- Path separator:', path.sep);
            }
            
            if (process.platform === 'win32') {
              // Direct path handling for Windows
              workdir = path.isAbsolute(platformPath) 
                ? platformPath 
                : path.join(workspacePath, platformPath);
              
              if (verbose) {
                console.log('Windows path handling:');
                console.log('- Final workdir:', workdir);
              }
            } else {
              if (path.isAbsolute(platformPath)) {
                workdir = platformPath;
              } else {
                workdir = path.join(workspacePath, platformPath);
              }
              if (verbose) {
                console.log('Unix path handling:');
                console.log('- Is absolute:', path.isAbsolute(platformPath));
                console.log('- Final workdir:', workdir);
              }
            }
            if (verbose) {
              console.log('Final workdir check:');
              console.log('- Workdir:', workdir);
              console.log('- Exists:', fs.existsSync(workdir));
              try {
                const stats = fs.statSync(workdir);
                console.log('- Is directory:', stats.isDirectory());
              } catch (e) {
                console.log('- Error checking workdir:', e.message);
              }
            }
          } else {
            workdir = process.cwd();
            if (verbose) {
              console.log('Using current directory:');
              console.log('- Workdir:', workdir);
            }
          }

          const execCommand = (command) => {
            try {
              if (verbose) console.log('Executing:', command);
              execSync(command, { stdio: 'inherit' });
            } catch (error) {
              process.exit(1);
            }
          };

          if (!fs.existsSync(path.join(installFolder, windsorExecutable))) {
            const arch = process.arch === 'arm64' ? 'arm64' : 'amd64';
            const osType = isWindows ? 'windows' : process.platform === 'darwin' ? 'darwin' : 'linux';

            // Check if ref is a version tag
            const isVersionTag = /^v?\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/i.test(ref);
            
            if (isVersionTag) {
              if (verbose) console.log(`Attempting to download Windsor CLI version: ${ref}`);
              const numericVersion = ref.replace(/^v/, '');
              const localFileName = `windsor_${numericVersion}_${osType}_${arch}.${isWindows ? 'zip' : 'tar.gz'}`;
              const downloadUrl = `https://github.com/windsorcli/cli/releases/download/${ref}/${localFileName}`;

              try {
                if (verbose) console.log('Downloading Windsor CLI:', downloadUrl);
                const curlCommand = `curl -L -o ${localFileName} ${downloadUrl}`;
                const mkdirCommand = isWindows ? `if not exist "${installFolder}" mkdir "${installFolder}"` : `mkdir -p "${installFolder}"`;
                const extractCommand = isWindows 
                  ? `powershell -Command "Expand-Archive -Path ${localFileName} -DestinationPath ${installFolder} -Force"`
                  : `tar -xzf ${localFileName} -C "${installFolder}"`;
                const chmodCommand = isWindows 
                  ? `icacls "${path.join(installFolder, windsorExecutable)}" /grant Everyone:F`
                  : `chmod +x "${path.join(installFolder, windsorExecutable)}"`;
                const rmCommand = isWindows ? `del ${localFileName}` : `rm -rf ${localFileName}`;

                execCommand(curlCommand);
                execCommand(mkdirCommand);
                execCommand(extractCommand);
                execCommand(chmodCommand);
                execCommand(rmCommand);

                let installedVersionOutput = execSync(`${path.join(installFolder, windsorExecutable)} version${verbose ? ' --verbose' : ''}`).toString().trim();
                let installedVersionMatch = installedVersionOutput.match(/^Version:\s*(\S+)/);
                let installedVersion = installedVersionMatch ? `v${installedVersionMatch[1]}` : '';

                if (verbose) {
                  console.log('Version check:');
                  console.log('- Expected:', ref);
                  console.log('- Installed:', installedVersion);
                }

                if (installedVersion !== ref) {
                  throw new Error(`Version mismatch: expected ${ref}, got ${installedVersion}`);
                }
              } catch (error) {
                if (verbose) console.log('Failed to download version, falling back to building from source');
                // Fall through to build from source
              }
            }

            // If not a version tag or download failed, check for Go and build from source
            if (!isVersionTag || !fs.existsSync(path.join(installFolder, windsorExecutable))) {
              try {
                const platform = os.platform();
                let goPathCommand = platform === 'win32' ? 'where go' : 'which go';
                const goPath = execSync(goPathCommand, { encoding: 'utf-8' }).trim();
                if (verbose) console.log('Go binary path:', goPath);
                
                const goVersion = execSync('go version', { encoding: 'utf-8' }).trim();
                if (verbose) console.log('Go version:', goVersion);

                if (verbose) console.log(`Building Windsor CLI from ref: ${ref}`);
                const tmpDir = path.join(os.tmpdir(), `windsor-build-${Date.now()}`);
                if (verbose) console.log('Using temporary build directory:', tmpDir);
                fs.mkdirSync(tmpDir, { recursive: true });
                execCommand(`git clone https://github.com/windsorcli/cli.git ${tmpDir}`);
                execCommand(`cd ${tmpDir} && git pull && git checkout ${ref}`);
                execCommand(`cd ${tmpDir}/cmd/windsor && go build -o ${path.join(installFolder, windsorExecutable)}`);
                fs.rmSync(tmpDir, { recursive: true, force: true });
              } catch (error) {
                console.error(error.message);
                process.exit(1);
              }
            }
          }

          fs.appendFileSync(process.env.GITHUB_PATH, `${installFolder}\n`);
          if (verbose) console.log('Added to PATH:', installFolder);

          if (workdir && fs.existsSync(workdir)) {
            process.chdir(workdir);
            if (verbose) console.log('Changed to workdir:', workdir);
          } else if (workdir) {
            console.error(`Workdir does not exist`);
            process.exit(1);
          }

    - name: Set Windsor CLI environment variables
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');

          const isWindows = os.platform() === 'win32';
          const installFolder = path.join(process.env.RUNNER_TOOL_CACHE, 'windsor', ref);
          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';
          const githubEnv = process.env.GITHUB_ENV;
          const input_context = '${{ inputs.context }}';
          const workdir = '${{ inputs.workdir }}';
          const verbose = '${{ inputs.verbose }}' === 'true';

          console.log('Environment setup:');
          console.log('- Install folder:', installFolder);
          console.log('- Context:', input_context);
          console.log('- Workdir:', workdir);
          console.log('- Current directory:', process.cwd());

          if (!process.env.PATH.includes(installFolder)) {
            console.error('Install folder not in PATH');
            process.exit(1);
          }

          if (input_context) {
            try {
              const command = `${windsorExecutable} init ${input_context}${verbose ? ' --verbose' : ''}`;
              if (verbose) {
                console.log('Environment setup:');
                console.log('- Current directory:', process.cwd());
                console.log('- GITHUB_WORKSPACE:', process.env.GITHUB_WORKSPACE);
                console.log('- Input context:', input_context);
                console.log('- Running command:', command);
              }
              
              try {
                execSync(command, { stdio: 'inherit' });
              } catch (error) {
                throw error;
              }
              
              const defaultContextDir = path.join(process.cwd(), 'contexts', input_context);
              if (!fs.existsSync(defaultContextDir)) {
                throw new Error(`Context directory '${defaultContextDir}' was not created`);
              }
              
              try {
                const contextOutput = execSync(`${windsorExecutable} context get${verbose ? ' --verbose' : ''}`, { 
                  encoding: 'utf-8',
                  stdio: 'pipe'
                }).toString().trim();
                
                if (contextOutput !== input_context) {
                  throw new Error(`Context verification failed: expected '${input_context}', got '${contextOutput}'`);
                }
              } catch (error) {
                console.error(error.message);
                throw error;
              }
            } catch (error) {
              process.exit(1);
            }
          }

          if (workdir) {
            try {
              process.chdir(workdir);
              if (verbose) console.log('Changed to workdir:', workdir);
            } catch (error) {
              console.error('Error changing to workdir');
              if (verbose) console.error('Error details:', error.message);
              process.exit(1);
            }
          }

          // Run windsor env to get environment variables
          try {
            if (verbose) console.log(`Running: ${windsorExecutable} env`);
            const envOutput = execSync(`${windsorExecutable} env${verbose ? ' --verbose' : ''}`, { 
              encoding: 'utf-8',
              stdio: 'pipe'
            });

            if (verbose) console.log('Raw windsor env output:', envOutput);

            if (!envOutput) {
              throw new Error('windsor env returned no output');
            }

            // Only keep non-empty env var assignments
            const envLines = envOutput.split('\n')
              .filter(line => line.trim())
              .filter(line => line.startsWith('export ') || line.startsWith('$env:'));

            if (verbose) console.log('Processed environment lines:', envLines);

            // Process each environment variable
            envLines.forEach(line => {
              if (line.startsWith('export ')) {
                const assignment = line.replace(/^export /, '');
                const eqIdx = assignment.indexOf('=');
                if (eqIdx !== -1) {
                  const key = assignment.slice(0, eqIdx);
                  let value = assignment.slice(eqIdx + 1);
                  // Strip quotes from all values
                  value = value.replace(/^["']|["']$/g, '');
                  fs.appendFileSync(githubEnv, `${key}<<EOF\n${value}\nEOF\n`);
                }
              } else if (line.startsWith('$env:')) {
                const match = line.match(/^\$env:([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)$/);
                if (match) {
                  const [_, key, rawValue] = match;
                  let value = rawValue.trim();
                  // Strip quotes from all values
                  value = value.replace(/^["']|["']$/g, '');
                  fs.appendFileSync(githubEnv, `${key}<<EOF\n${value}\nEOF\n`);
                }
              }
            });

            // Verify the variables were set
            const setVars = envLines.map(line => {
              if (line.startsWith('export ')) {
                return line.replace(/^export /, '').split('=')[0];
              } else if (line.startsWith('$env:')) {
                return line.match(/^\$env:([A-Za-z_][A-Za-z0-9_]*)/)[1];
              }
              return null;
            }).filter(Boolean);

            if (verbose) console.log('Set environment variables:', setVars.join(', '));
          } catch (error) {
            console.error('Error running windsor env');
            if (verbose) console.error('Error details:', error.message);
            process.exit(1);
          }
