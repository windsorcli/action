# windsorcli.yaml
name: 'Windsor CLI Action'
description: 'Installs and configures the Windsor CLI for use in GitHub Actions'

inputs:
  version:
    description: 'The version of Windsor CLI to install'
    required: false
    default: v0.5.2
  ref:
    description: 'Git reference to build Windsor CLI from source'
    required: false
    default: ""
  context:
    description: 'The context to use for Windsor CLI commands'
    required: false
    default: "local"
  workdir:
    description: 'The working directory for Windsor CLI commands'
    required: false
    default: ""

runs:
  using: 'composite'
  steps:

    - name: Check if Git is installed
      id: check-git
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            // Check if Git is installed by attempting to get its version
            execSync('git --version', { stdio: 'inherit' });
            console.log('Git is installed.');
          } catch (error) {
            console.log(`Current PATH: ${process.env.PATH}`);
            console.error('Git is not installed. Please install Git to proceed.');
            process.exit(1);
          }

    - name: Check Go Installation
      if: ${{ inputs.ref != '' }}
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            let goPathCommand = platform === 'win32' ? 'where go' : 'which go';

            console.log(`Checking Go installation on ${platform}...`);
            const goPath = execSync(goPathCommand, { encoding: 'utf-8' }).trim();
            console.log(`Go binary path: ${goPath}`);

            const goVersion = execSync('go version', { encoding: 'utf-8' }).trim();
            console.log(`Go version: ${goVersion}`);
          } catch (error) {
            console.error('Go is not installed or not found in PATH:', error.message);
            process.exit(1);
          }

    - name: Install Windsor CLI
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');
          
          const cleanInput = (input) => typeof input === 'string' ? input.replace(/\r?\n|\r/g, '') : input;

          const isWindows = os.platform() === 'win32';
          const installFolder = path.resolve(process.env.GITHUB_WORKSPACE, 'bin');
          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';
          const githubWorkspace = process.env.GITHUB_WORKSPACE;
          let version = cleanInput('${{ inputs.version }}');
          const ref = cleanInput('${{ inputs.ref }}');
          const input_context = cleanInput('${{ inputs.context }}');
          let rawWorkdir = cleanInput('${{ inputs.workdir }}');
          
          // Handle workdir path construction
          let workdir;
          if (rawWorkdir) {
            console.log(`Raw workdir input: ${rawWorkdir}`);
            console.log(`GitHub workspace: ${githubWorkspace}`);
            
            // Convert to forward slashes for consistent handling
            const normalizedInput = rawWorkdir.replace(/\\/g, '/');
            const normalizedWorkspace = githubWorkspace.replace(/\\/g, '/');
            
            // Remove workspace prefix if present
            const cleanPath = normalizedInput.startsWith(normalizedWorkspace) 
              ? normalizedInput.slice(normalizedWorkspace.length)
              : normalizedInput;
            
            // Remove any drive letter and leading slashes
            const finalPath = cleanPath
              .replace(/^[A-Za-z]:/, '')
              .replace(/^\/+/, '');
            
            // Join with workspace
            workdir = path.join(githubWorkspace, finalPath);
            
            console.log(`Constructed workdir: ${workdir}`);
          } else {
            workdir = process.cwd();
          }

          console.log(`Final workdir: ${workdir}`);
          console.log(`Install folder: ${installFolder}`);
          console.log(`Context: ${input_context}`);

          const execCommand = (command) => {
            try {
              console.log(`Executing: ${command}`);
              execSync(command, { stdio: 'inherit' });
            } catch (error) {
              console.error(`Error executing command: ${command}`);
              console.error(error.message);
              process.exit(1);
            }
          };

          if (!fs.existsSync(path.join(installFolder, windsorExecutable))) {
            console.log('Windsor CLI not found, proceeding with installation.');

            const arch = process.arch === 'arm64' ? 'arm64' : 'amd64';
            const osType = isWindows ? 'windows' : process.platform === 'darwin' ? 'darwin' : 'linux';

            if (ref) {
              console.log(`Installing Windsor CLI from ref (${ref})...`);
              execCommand(`git clone https://github.com/windsorcli/cli.git ${githubWorkspace}/cli`);
              execCommand(`cd ${githubWorkspace}/cli && git pull && git checkout ${ref}`);
              execCommand(`cd ${githubWorkspace}/cli/cmd/windsor && go build -o ${path.join(installFolder, windsorExecutable)}`);
              version = 'vdev';  // Set expected version to vdev when building from source
            } else {
              const numericVersion = version.replace(/^v/, '');
              const localFileName = `windsor_${numericVersion}_${osType}_${arch}.tar.gz`;
              const downloadUrl = `https://github.com/windsorcli/cli/releases/download/${version}/${localFileName}`;

              const curlCommand = `curl -L -o ${localFileName} ${downloadUrl}`;
              const mkdirCommand = isWindows ? `if not exist "${installFolder}" mkdir "${installFolder}"` : `mkdir -p "${installFolder}"`;
              const extractCommand = isWindows 
                ? `powershell -Command "tar -xzf ${localFileName} -C ${installFolder}"`
                : `tar -xzf ${localFileName} -C "${installFolder}"`;
              const chmodCommand = isWindows 
                ? `icacls "${path.join(installFolder, windsorExecutable)}" /grant Everyone:F`
                : `chmod +x "${path.join(installFolder, windsorExecutable)}"`;
              const rmCommand = isWindows ? `del ${localFileName}` : `rm -rf ${localFileName}`;

              try {
                execCommand(curlCommand);
                execCommand(mkdirCommand);
                execCommand(extractCommand);
                execCommand(chmodCommand);
                execCommand(rmCommand);
              } catch (error) {
                console.error('Error executing commands:', error.message);
                process.exit(1);
              }

              let installedVersionOutput = execSync(`${path.join(installFolder, windsorExecutable)} version`).toString().trim();

              // Extract the version number from the output
              let installedVersionMatch = installedVersionOutput.match(/^Version:\s*(\S+)/);
              let installedVersion = installedVersionMatch ? `v${installedVersionMatch[1]}` : '';

              console.log(`Expected version: "${version}"`);
              console.log(`Installed version: "${installedVersion}"`);

              if (installedVersion !== version) {
                console.error(`Version mismatch: expected ${version}, got ${installedVersion}`);
                process.exit(1);
              }

              console.log('Windsor CLI installation complete.');
            }
          }

          // Always add installFolder to PATH for all subsequent steps
          fs.appendFileSync(process.env.GITHUB_PATH, `${installFolder}\n`);

          // When changing directories, always check existence
          if (workdir && fs.existsSync(workdir)) {
            process.chdir(workdir);
          } else if (workdir) {
            console.error(`Workdir does not exist: ${workdir}`);
            process.exit(1);
          }

    - name: Set Windsor CLI environment variables
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');

          const isWindows = os.platform() === 'win32';
          const installFolder = path.resolve(process.env.GITHUB_WORKSPACE, 'bin');
          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';
          const githubEnv = process.env.GITHUB_ENV;
          const input_context = '${{ inputs.context }}';
          const workdir = '${{ inputs.workdir }}';

          // Verify PATH is set correctly
          console.log('Current PATH:', process.env.PATH);
          console.log('Install folder:', installFolder);
          if (!process.env.PATH.includes(installFolder)) {
            console.error(`Install folder ${installFolder} not in PATH`);
            process.exit(1);
          }

          // First, ensure context is set if provided
          if (input_context) {
            console.log(`Setting Windsor context to: ${input_context}`);
            try {
              // Run init in default directory first
              console.log(`Running: ${windsorExecutable} init ${input_context}`);
              const initOutput = execSync(`${windsorExecutable} init ${input_context}`, { 
                encoding: 'utf-8',
                stdio: ['pipe', 'pipe', 'pipe']
              });
              console.log('Windsor init stdout:', initOutput.stdout);
              console.log('Windsor init stderr:', initOutput.stderr);
              
              // Check if context directory exists in default location
              const defaultContextDir = path.join(process.cwd(), 'contexts', input_context);
              console.log('Checking default context directory:', defaultContextDir);
              if (!fs.existsSync(defaultContextDir)) {
                throw new Error(`Context directory not created: ${defaultContextDir}`);
              }
              
              // Verify the context was set
              console.log(`Running: ${windsorExecutable} context get`);
              const contextOutput = execSync(`${windsorExecutable} context get`, { 
                encoding: 'utf-8',
                stdio: 'pipe'
              });
              console.log('Current Windsor context:', contextOutput);
              
              if (!contextOutput.trim().includes(input_context)) {
                throw new Error(`Context mismatch: expected ${input_context}, got ${contextOutput}`);
              }

              // Now change to workdir if specified
              if (workdir) {
                console.log(`Changing to workdir: ${workdir}`);
                process.chdir(workdir);
              }
            } catch (error) {
              console.error('Error setting Windsor context:', error.message);
              if (error.stdout) console.error('stdout:', error.stdout);
              if (error.stderr) console.error('stderr:', error.stderr);
              process.exit(1);
            }
          }

          // Run windsor env and capture output
          try {
            // First verify windsor is in PATH
            const whichOutput = execSync(`which ${windsorExecutable}`, { encoding: 'utf-8' });
            console.log('Windsor executable path:', whichOutput);

            // Run windsor env with full output capture
            console.log(`Running: ${windsorExecutable} env`);
            const envOutput = execSync(`${windsorExecutable} env`, { 
              encoding: 'utf-8',
              stdio: 'pipe'
            });
            console.log('Raw windsor env output:', envOutput);

            if (!envOutput) {
              throw new Error('windsor env returned no output');
            }

            const envLines = envOutput.split('\n')
              .filter(line => line.trim() && !line.startsWith('#') && !line.includes('Cannot execute commands'));

            console.log('Processed environment lines:', envLines);

            // Process each environment variable
            envLines.forEach(line => {
              if (line.startsWith('export ')) {
                // Handle bash-style export
                const assignment = line.replace(/^export /, '');
                // Split only on the first '='
                const eqIdx = assignment.indexOf('=');
                if (eqIdx !== -1) {
                  const key = assignment.slice(0, eqIdx);
                  let value = assignment.slice(eqIdx + 1);
                  // Remove quotes from value
                  const cleanValue = value.replace(/^["']|["']$/g, '');
                  // Properly escape the value for GitHub Actions
                  const escapedValue = cleanValue.replace(/"/g, '\\"').replace(/\n/g, '\\n');
                  // Use the proper GitHub Actions environment variable format
                  const envLine = `${key}<<EOF\n${escapedValue}\nEOF\n`;
                  console.log(`Setting environment variable: ${key}`);
                  fs.appendFileSync(githubEnv, envLine);
                }
              } else if (line.startsWith('$env:')) {
                // Handle PowerShell-style
                const match = line.match(/^\$env:([A-Za-z_][A-Za-z0-9_]*)\s*=\s*["']?([^"']+)["']?/);
                if (match) {
                  const [_, key, value] = match;
                  const escapedValue = value.replace(/"/g, '\\"').replace(/\n/g, '\\n');
                  // Use the proper GitHub Actions environment variable format
                  const envLine = `${key}<<EOF\n${escapedValue}\nEOF\n`;
                  console.log(`Setting environment variable: ${key}`);
                  fs.appendFileSync(githubEnv, envLine);
                }
              }
            });

            // Verify the variables were set
            const setVars = envLines.map(line => {
              if (line.startsWith('export ')) {
                return line.replace(/^export /, '').split('=')[0];
              } else if (line.startsWith('$env:')) {
                return line.match(/^\$env:([A-Za-z_][A-Za-z0-9_]*)/)[1];
              }
              return null;
            }).filter(Boolean);

            console.log('Set environment variables:', setVars.join(', '));
          } catch (error) {
            console.error('Error running windsor env:', error.message);
            if (error.stdout) console.error('stdout:', error.stdout);
            if (error.stderr) console.error('stderr:', error.stderr);
            process.exit(1);
          }
