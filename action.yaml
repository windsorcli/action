# windsorcli.yaml
name: 'Windsor CLI Action'

inputs:
  version:
    required: false
    type: string
    default: v0.5.2
  ref:
    required: false
    type: string
    default: ""
  context:
    required: false
    type: string
    default: ""
  workdir:
    required: false
    type: string
    default: ""

runs:
  using: 'composite'
  steps:

    - name: Check if Git is installed
      id: check-git
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');

          try {
            // Check if Git is installed by attempting to get its version
            execSync('git --version', { stdio: 'inherit' });
            console.log('Git is installed.');
          } catch (error) {          
            console.log(`Current PATH: ${process.env.PATH}`);
            console.error('Git is not installed. Please install Git to proceed.');
            process.exit(1);
          }
                    
    - name: Check Go Installation
      if: ${{ inputs.ref != '' }}
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          const os = require('os');

          try {
            const platform = os.platform();
            let goPathCommand = platform === 'win32' ? 'where go' : 'which go';

            console.log(`Checking Go installation on ${platform}...`);
            const goPath = execSync(goPathCommand, { encoding: 'utf-8' }).trim();
            console.log(`Go binary path: ${goPath}`);

            const goVersion = execSync('go version', { encoding: 'utf-8' }).trim();
            console.log(`Go version: ${goVersion}`);
          } catch (error) {
            console.error('Go is not installed or not found in PATH:', error.message);
            process.exit(1);
          }
          
    - name: Install Windsor CLI
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');

          const isWindows = os.platform() === 'win32';
          const workdir = '${{ inputs.workdir }}' === '' ? process.cwd() : path.resolve('${{ inputs.workdir }}');
          const installFolder = path.resolve(workdir, 'bin');
          const githubWorkspace = process.env.GITHUB_WORKSPACE;
          let version = '${{ inputs.version }}';
          const ref = '${{ inputs.ref }}';
          const input_context = 'local';

          console.log(`Workdir: ${workdir}`);
          console.log(`Install folder: ${installFolder}`);

          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';

          const execCommand = (command) => {
            try {
              console.log(`Executing: ${command}`);
              execSync(command, { stdio: 'inherit' });
            } catch (error) {
              console.error(`Error executing command: ${command}`);
              console.error(error.message);
              process.exit(1);
            }
          };

          if (!fs.existsSync(path.join(installFolder, windsorExecutable))) {
            console.log('Windsor CLI not found, proceeding with installation.');

            const arch = process.arch === 'arm64' ? 'arm64' : 'amd64';
            const osType = isWindows ? 'windows' : process.platform === 'darwin' ? 'darwin' : 'linux';

            if (ref) {
              console.log(`Installing Windsor CLI from ref (${ref})...`);
              execCommand(`git clone https://github.com/windsorcli/cli.git ${githubWorkspace}/cli`);
              execCommand(`cd ${githubWorkspace}/cli && git checkout ${ref}`);
              execCommand(`cd ${githubWorkspace}/cli/cmd/windsor && go build -o ${path.join(installFolder, windsorExecutable)}`);
              version = 'vdev';  // Set expected version to vdev when building from source
            } else {
              const numericVersion = version.replace(/^v/, '');
              const localFileName = `windsor_${numericVersion}_${osType}_${arch}.tar.gz`;
              const downloadUrl = `https://github.com/windsorcli/cli/releases/download/${version}/${localFileName}`;

              const curlCommand = `curl -L -o ${localFileName} ${downloadUrl}`;
              const mkdirCommand = `mkdir -p "${installFolder}"`;
              const extractCommand = isWindows 
                ? `powershell -Command "tar -xzf ${localFileName} -C ${installFolder}"`
                : `tar -xzf ${localFileName} -C "${installFolder}"`;
              const chmodCommand = isWindows 
                ? `icacls "${path.join(installFolder, windsorExecutable)}" /grant Everyone:F`
                : `chmod +x "${path.join(installFolder, windsorExecutable)}"`;
              const rmCommand = isWindows ? `del ${localFileName}` : `rm -rf ${localFileName}`;

              try {
                execCommand(curlCommand);
                execCommand(mkdirCommand);
                execCommand(extractCommand);
                execCommand(chmodCommand);
                execCommand(rmCommand);
              } catch (error) {
                console.error('Error executing commands:', error.message);
                process.exit(1);
              }

              let installedVersionOutput = execSync(`${path.join(installFolder, windsorExecutable)} version`).toString().trim();

              // Extract the version number from the output
              let installedVersionMatch = installedVersionOutput.match(/^Version:\s*(\S+)/);
              let installedVersion = installedVersionMatch ? `v${installedVersionMatch[1]}` : '';

              console.log(`Expected version: "${version}"`);
              console.log(`Installed version: "${installedVersion}"`);

              if (installedVersion !== version) {
                console.error(`Version mismatch: expected ${version}, got ${installedVersion}`);
                process.exit(1);
              }

              console.log('Windsor CLI installation complete.');
            }

            console.log(`Setting environment variables for Windsor CLI.`);
            fs.appendFileSync(process.env.GITHUB_PATH, `${installFolder}\n`);
            fs.appendFileSync(process.env.GITHUB_ENV, `WINDSOR_PROJECT_ROOT=${workdir}\n`);

            // Set the environment variable in the current process
            process.env.WINDSOR_PROJECT_ROOT = workdir;

            console.log(`workdir=${workdir}`);
            console.log(`WINDSOR_PROJECT_ROOT value: ${process.env.WINDSOR_PROJECT_ROOT}`);

            if (input_context !== "") {
              console.log(`Setting context to ${input_context}`);
              execCommand(`cd ${workdir} && ${path.join(installFolder, windsorExecutable)} init ${input_context}`);
            }
          }
