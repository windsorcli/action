# windsorcli.yaml
name: 'Windsor CLI Action'
description: 'Installs and configures the Windsor CLI for use in GitHub Actions'

inputs:
  ref:
    description: 'Git reference to build Windsor CLI from source or version tag to download'
    required: false
    default: v0.6.1  # renovate: datasource=github-releases depName=windsorcli/cli
  context:
    description: 'The context to use for Windsor CLI commands'
    required: false
    default: "local"
  workdir:
    description: 'The working directory for Windsor CLI commands'
    required: false
    default: ""
  install-only:
    description: 'Only install the CLI without initializing context or injecting environment variables'
    required: false
    default: "false"
  inject-secrets:
    description: 'Whether to inject decrypted secrets into environment variables'
    required: false
    default: "false"

runs:
  using: 'composite'
  steps:

    - name: Check if Git is installed
      id: check-git
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          try {
            const output = execSync('git --version', { encoding: 'utf-8' });
          } catch (error) {
            console.error('Git is not installed. Please install Git to proceed.');
            process.exit(1);
          }

    - name: Install Windsor CLI
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');
          
          const cleanInput = (input) => typeof input === 'string' ? input.replace(/\r?\n|\r/g, '') : input;
          const ref = cleanInput('${{ inputs.ref }}');
          const isVersionTag = /^v?\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/i.test(ref);

          console.log(`Installing Windsor CLI ${isVersionTag ? `version ${ref}` : `from ref ${ref}`}`);

          const isWindows = os.platform() === 'win32';
          const installFolder = path.join(process.env.RUNNER_TOOL_CACHE, 'windsor', ref);
          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';
          const githubEnv = process.env.GITHUB_ENV;
          const input_context = '${{ inputs.context }}';
          let rawWorkdir = cleanInput('${{ inputs.workdir }}');
          
          // Simple workdir handling
          let workdir;
          if (rawWorkdir) {
            if (path.isAbsolute(rawWorkdir)) {
              workdir = rawWorkdir;
            } else {
              workdir = path.join(process.env.GITHUB_WORKSPACE, rawWorkdir);
            }
          } else {
            workdir = process.cwd();
          }

          const execCommand = (command) => {
            try {
              execSync(command, { stdio: 'inherit' });
            } catch (error) {
              console.error(`Command failed: ${command}`);
              throw error;
            }
          };

          // Always rebuild for non-semver refs
          if (!isVersionTag || !fs.existsSync(path.join(installFolder, windsorExecutable))) {
            const arch = process.arch === 'arm64' ? 'arm64' : 'amd64';
            const osType = isWindows ? 'windows' : process.platform === 'darwin' ? 'darwin' : 'linux';

            if (isVersionTag) {
              console.log(`Downloading Windsor CLI release for ${osType}/${arch}`);
              const numericVersion = ref.replace(/^v/, '');
              const localFileName = `windsor_${numericVersion}_${osType}_${arch}.${isWindows ? 'zip' : 'tar.gz'}`;
              const downloadUrl = `https://github.com/windsorcli/cli/releases/download/${ref}/${localFileName}`;

              try {
                const curlCommand = `curl -L -o ${localFileName} ${downloadUrl}`;
                const mkdirCommand = isWindows ? `if not exist "${installFolder}" mkdir "${installFolder}"` : `mkdir -p "${installFolder}"`;
                const extractCommand = isWindows 
                  ? `powershell -Command "Expand-Archive -Path ${localFileName} -DestinationPath ${installFolder} -Force"`
                  : `tar -xzf ${localFileName} -C "${installFolder}"`;
                const chmodCommand = isWindows 
                  ? `icacls "${path.join(installFolder, windsorExecutable)}" /grant Everyone:F`
                  : `chmod +x "${path.join(installFolder, windsorExecutable)}"`;
                const rmCommand = isWindows ? `del ${localFileName}` : `rm -rf ${localFileName}`;

                execCommand(curlCommand);
                execCommand(mkdirCommand);
                execCommand(extractCommand);
                execCommand(chmodCommand);
                execCommand(rmCommand);

                const installedVersionOutput = execSync(`${path.join(installFolder, windsorExecutable)} version`).toString().trim();
                const installedVersionMatch = installedVersionOutput.match(/^Version:\s*(\S+)/);
                const installedVersion = installedVersionMatch ? installedVersionMatch[1] : '';

                if (!installedVersion || installedVersion !== ref.replace(/^v/, '')) {
                  throw new Error(`Version mismatch: expected ${ref}, got ${installedVersion}`);
                }
                console.log(`Successfully installed Windsor CLI version ${installedVersion}`);
              } catch (error) {
                console.log('Release download failed, falling back to building from source');
                // Fall through to build from source
              }
            }

            // If not a version tag or download failed, check for Go and build from source
            if (!isVersionTag || !fs.existsSync(path.join(installFolder, windsorExecutable))) {
              try {
                console.log('Building Windsor CLI from source');
                const goPath = execSync(isWindows ? 'where go' : 'which go', { encoding: 'utf-8' }).trim();
                const goVersion = execSync('go version', { encoding: 'utf-8' }).trim();
                
                console.log(`Using Go ${goVersion}`);
                
                const tmpDir = path.join(os.tmpdir(), `windsor-build-${Date.now()}`);
                
                fs.mkdirSync(tmpDir, { recursive: true });
                execCommand(`git clone --depth 1 --branch ${ref} https://github.com/windsorcli/cli.git ${tmpDir}`);
                process.chdir(tmpDir);
                if (!fs.existsSync('go.mod')) {
                  execCommand('go mod init github.com/windsorcli/cli');
                }
                execCommand('go mod tidy');
                
                const tempBuildPath = path.join(tmpDir, 'cmd', 'windsor', windsorExecutable);
                execCommand(`cd cmd/windsor && go build -o ${tempBuildPath}`);
                
                fs.mkdirSync(installFolder, { recursive: true });
                fs.copyFileSync(tempBuildPath, path.join(installFolder, windsorExecutable));
                console.log('Successfully built Windsor CLI from source');
              } catch (error) {
                console.error('Build failed:', error.message);
                process.exit(1);
              }
            }
          } else {
            console.log('Windsor CLI already installed');
          }

          fs.appendFileSync(process.env.GITHUB_PATH, `${installFolder}\n`);
          console.log(`Added Windsor CLI to PATH: ${installFolder}`);

          if (workdir && fs.existsSync(workdir)) {
            process.chdir(workdir);
            console.log(`Changed working directory to: ${workdir}`);
          } else if (workdir) {
            console.error(`Workdir does not exist: ${workdir}`);
            process.exit(1);
          }

    - name: Set Windsor CLI environment variables
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      if: ${{ inputs.install-only != 'true' }}
      with:
        script: |
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          const os = require('os');

          const isWindows = os.platform() === 'win32';
          const installFolder = path.join(process.env.RUNNER_TOOL_CACHE, 'windsor', '${{ inputs.ref }}');
          const windsorExecutable = isWindows ? 'windsor.exe' : 'windsor';
          const githubEnv = process.env.GITHUB_ENV;
          const input_context = '${{ inputs.context }}';
          const workdir = '${{ inputs.workdir }}';

          // Function to detect secrets in environment variables
          const detectSecrets = (managedVars, yamlContent) => {
            const secrets = new Set();
            if (!managedVars) return secrets;

            const vars = managedVars.split(',').map(v => v.trim());
            const lines = yamlContent.split('\n');

            vars.forEach(varName => {
              // Look for the variable in the YAML content
              const varPattern = new RegExp(`\\s*${varName}\\s*:\\s*\\$\\{\\{`);
              if (lines.some(line => varPattern.test(line))) {
                secrets.add(varName);
              }
            });

            return secrets;
          };

          // Function to mask secrets in GitHub Actions
          const maskSecrets = (secrets) => {
            secrets.forEach(secret => {
              if (process.env[secret]) {
                console.log(`::add-mask::${process.env[secret]}`);
              }
            });
          };

          console.log('Environment setup:');
          console.log('- Install folder:', installFolder);
          console.log('- Context:', input_context);
          console.log('- Workdir:', workdir);
          console.log('- Current directory:', process.cwd());
          console.log('- Secret injection:', '${{ inputs.inject-secrets }}' === 'true' ? 'enabled' : 'disabled');

          if (!process.env.PATH.includes(installFolder)) {
            console.error('Install folder not in PATH');
            process.exit(1);
          }

          if (input_context) {
            try {
              console.log(`Initializing context: ${input_context}`);
              const command = `${windsorExecutable} init ${input_context}`;
              execSync(command, { stdio: 'inherit' });
              
              const defaultContextDir = path.join(process.cwd(), 'contexts', input_context);
              if (!fs.existsSync(defaultContextDir)) {
                throw new Error(`Context directory '${defaultContextDir}' was not created`);
              }
              
              const contextOutput = execSync(`${windsorExecutable} context get`, { 
                encoding: 'utf-8',
                stdio: 'pipe'
              }).toString().trim();
              
              if (contextOutput !== input_context) {
                throw new Error(`Context verification failed: expected '${input_context}', got '${contextOutput}'`);
              }
              console.log(`Context initialized successfully: ${input_context}`);
            } catch (error) {
              console.error(`Failed to initialize context: ${error.message}`);
              process.exit(1);
            }
          }

          if (workdir) {
            try {
              process.chdir(workdir);
              console.log(`Changed to workdir: ${workdir}`);
            } catch (error) {
              console.error('Error changing to workdir');
              process.exit(1);
            }
          }

          // Run windsor env to get environment variables
          try {
            console.log('Retrieving environment variables');
            const envOutput = execSync(`${windsorExecutable} env${'${{ inputs.inject-secrets }}' === 'true' ? ' --decrypt' : ''}`, { 
              encoding: 'utf-8',
              stdio: 'pipe'
            });

            if (!envOutput) {
              throw new Error('windsor env returned no output');
            }

            // Only keep non-empty env var assignments
            const envLines = envOutput.split('\n')
              .filter(line => line.trim())
              .filter(line => line.startsWith('export ') || line.startsWith('$env:'));

            console.log(`Found ${envLines.length} environment variables to inject`);

            // Extract WINDSOR_MANAGED_ENV from the output
            let managedEnvVars = '';
            envLines.forEach(line => {
              if (line.includes('WINDSOR_MANAGED_ENV=')) {
                const match = line.match(/WINDSOR_MANAGED_ENV=['"]([^'"]+)['"]/);
                if (match) {
                  managedEnvVars = match[1];
                }
              }
            });

            // Process each environment variable
            envLines.forEach(line => {
              if (line.startsWith('export ')) {
                const assignment = line.replace(/^export /, '');
                const eqIdx = assignment.indexOf('=');
                if (eqIdx !== -1) {
                  const key = assignment.slice(0, eqIdx);
                  let value = assignment.slice(eqIdx + 1);
                  // Strip quotes from all values
                  value = value.replace(/^["']|["']$/g, '');
                  fs.appendFileSync(githubEnv, `${key}<<EOF\n${value}\nEOF\n`);
                }
              } else if (line.startsWith('$env:')) {
                const match = line.match(/^\$env:([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)$/);
                if (match) {
                  const [_, key, rawValue] = match;
                  let value = rawValue.trim();
                  // Strip quotes from all values
                  value = value.replace(/^["']|["']$/g, '');
                  fs.appendFileSync(githubEnv, `${key}<<EOF\n${value}\nEOF\n`);
                }
              }
            });

            // Check for secrets in windsor.yaml
            const windsorYamlPath = path.join(process.cwd(), 'windsor.yaml');
            if (fs.existsSync(windsorYamlPath) && managedEnvVars) {
              try {
                console.log('Scanning windsor.yaml for secrets');
                const content = fs.readFileSync(windsorYamlPath, 'utf8');
                const secrets = detectSecrets(managedEnvVars, content);
                if (secrets.size > 0) {
                  console.log(`Detected ${secrets.size} secrets in context ${input_context}:`);
                  secrets.forEach(secret => console.log(`- ${secret}`));
                  maskSecrets(secrets);
                  console.log('Secrets have been masked in logs');
                } else {
                  console.log('No secrets detected in windsor.yaml');
                }
              } catch (error) {
                console.error('Error detecting secrets:', error.message);
              }
            }
            console.log('Environment variables injected successfully');
          } catch (error) {
            console.error('Error running windsor env:', error.message);
            process.exit(1);
          }
